<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WoXinChangDan!!!</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-13T07:58:40.633Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>15101051</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>模板题 题解</title>
    <link href="http://yoursite.com/2019/04/13/SolutionToTemplate/"/>
    <id>http://yoursite.com/2019/04/13/SolutionToTemplate/</id>
    <published>2019-04-13T06:12:08.000Z</published>
    <updated>2019-04-13T07:58:40.633Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Description："><a href="#Description：" class="headerlink" title="Description："></a>Description：</h1><p>给出一棵以 $1​$ 号点为根的树，每个点上有一个字符，每个点所代表的字符串 $s[i]​$ 为从这个点到根的字符连起来形成的字符串，求：</p><script type="math/tex; mode=display">\sum_{i=1}^n\sum_{j=i+1 }^n\mathrm{lcs}(i,j)\times \mathrm{lcp}(i,j)</script><p>其中：$\mathrm{lcs}$ 表示两个字符串的最长公共后缀，$\mathrm{lcp}$ 表示两个字符串的最长公共前缀。</p><h1 id="Solution："><a href="#Solution：" class="headerlink" title="Solution："></a>Solution：</h1><h3 id="对于-10-的数据满足：-n-leqslant-200"><a href="#对于-10-的数据满足：-n-leqslant-200" class="headerlink" title="对于 $10\%$ 的数据满足：$n\leqslant 200$"></a>对于 $10\%$ 的数据满足：$n\leqslant 200$</h3><p>直接枚举点对暴力就行了，时间复杂度 $O(n^3)$ 。</p><h3 id="对于-10-的数据满足：-n-leqslant-5000"><a href="#对于-10-的数据满足：-n-leqslant-5000" class="headerlink" title="对于 $10\%$ 的数据满足：$n\leqslant 5000$"></a>对于 $10\%$ 的数据满足：$n\leqslant 5000$</h3><p>显然两个串的 $\mathrm{lcp}$ 就是 $\mathrm{lca}$ 的深度，那么我们把所有串拿出来反过来建出 $trie$ ，还是暴力枚举点对用 $ST$ 表 $O(1)$ 求 $LCA$ 即可。</p><p>时间复杂度 $O(n^2)$ 。</p><h3 id="对于-25-的数据满足：-n-leqslant-300000-并且给出的树是一条链并且-1-号点是链的一个端点。"><a href="#对于-25-的数据满足：-n-leqslant-300000-并且给出的树是一条链并且-1-号点是链的一个端点。" class="headerlink" title="对于 $25\%$ 的数据满足：$n\leqslant 300000$ 并且给出的树是一条链并且 $1$ 号点是链的一个端点。"></a>对于 $25\%$ 的数据满足：$n\leqslant 300000$ 并且给出的树是一条链并且 $1$ 号点是链的一个端点。</h3><p>这个部分分就相当于是一个序列上的情况，那么不难想到我们对于这个序列反过来建后缀数组，那么我们考虑枚举每一个位置作为靠前的那个位置计算答案。</p><p>先建出 $height$ 数组的笛卡尔树，因为字符是随机的因此 $height$ 数组也可以看成是随机的，那么有一个结论是笛卡尔树的期望深度是 $\log n$，那么我们从后往前枚举这个位置，刚开始笛卡尔树为空，每次把当前这个位置的下一个位置插进树里去，同时在树上维护子树大小，然后对于当前这个询问，从对应的点不停向上跳，在跳的同时统计和他相对的那棵子树的答案即可。</p><p>时间复杂度期望 $O(n\log n)$。</p><h3 id="对于-25-的数据满足：-n-leqslant-50000"><a href="#对于-25-的数据满足：-n-leqslant-50000" class="headerlink" title="对于 $25\%$ 的数据满足：$n\leqslant 50000$"></a>对于 $25\%$ 的数据满足：$n\leqslant 50000$</h3><p>还是考虑随机的特殊性，另有一个结论是在随机情况下 $\mathrm{lcs}$ 的长度期望是 $\log_{\Sigma}n$ ，那么我们就可以考虑使用一个复杂度与 $\mathrm{lcs}$ 长度有关的算法。</p><p>既然 $\mathrm{lcp}(i,j)=dep[\mathrm{LCA}(i,j)]$ ，那么我们考虑枚举一个点并计算他作为 $\mathrm{LCA}$ 的代价，我们可以对于每个点哈希向上大约 $1\sim\log_2n$ 长度的字符串，出题人生成的数据长度大概不超过 $50$ ，然后就是要求 $len$ 相等但是 $len+1$ 不相等的点对数，这个可以开一个桶计算，计算的过程可以用树上启发式合并($dsu\text{ }on\text{ }tree$)来优化。</p><p>时间复杂度 $O(n\log^2 n)$ 。</p><h3 id="对于-30-的数据满足：-n-leqslant-300000"><a href="#对于-30-的数据满足：-n-leqslant-300000" class="headerlink" title="对于 $30\%$ 的数据满足：$n\leqslant 300000$"></a>对于 $30\%$ 的数据满足：$n\leqslant 300000$</h3><p>由于字符集太大无法使用后缀自动机，我们考虑后缀数组，首先在 $trie$ 上建立后缀数组，那么两个点间的 $lcp$ 就是他们对应位置之间 $height$ 的最小值，还是建立 $height$ 数组上的笛卡尔树，那么类似线段树合并，我们可以使用笛卡尔树合并，实现方法和线段树基本相同，我们只要在合并的时候顺便计算跨过根节点的贡献就行了。</p><p>时间复杂度 $O(n\log n)$ 。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Description：&quot;&gt;&lt;a href=&quot;#Description：&quot; class=&quot;headerlink&quot; title=&quot;Description：&quot;&gt;&lt;/a&gt;Description：&lt;/h1&gt;&lt;p&gt;给出一棵以 $1​$ 号点为根的树，每个点上有一个字符，每个
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>签到题 题解</title>
    <link href="http://yoursite.com/2019/04/13/SolutionToSign/"/>
    <id>http://yoursite.com/2019/04/13/SolutionToSign/</id>
    <published>2019-04-13T06:06:49.000Z</published>
    <updated>2019-04-13T07:59:08.931Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Description："><a href="#Description：" class="headerlink" title="Description："></a>Description：</h1><p>我们设 $f[i]​$ 表示 $i​$ 个点的环，每个点染 $k​$ 种颜色之一，旋转同构算一种方案的不同的染色方案数，求：</p><script type="math/tex; mode=display">\sum_{i=1}^ni\times f[i]</script><h1 id="Solution："><a href="#Solution：" class="headerlink" title="Solution："></a>Solution：</h1><h3 id="对于-20-的数据：-1-leqslant-n-leqslant5-1-leqslant-k-leqslant5"><a href="#对于-20-的数据：-1-leqslant-n-leqslant5-1-leqslant-k-leqslant5" class="headerlink" title="对于 $20\%$ 的数据：$1\leqslant n\leqslant5,1\leqslant k\leqslant5$"></a>对于 $20\%$ 的数据：$1\leqslant n\leqslant5,1\leqslant k\leqslant5$</h3><p>直接爆搜即可。</p><h3 id="对于-20-的数据：-1-leqslant-n-leqslant-50000-1-leqslant-k-leqslant10-9"><a href="#对于-20-的数据：-1-leqslant-n-leqslant-50000-1-leqslant-k-leqslant10-9" class="headerlink" title="对于 $20\%$ 的数据：$1\leqslant n\leqslant 50000,1\leqslant k\leqslant10^9$"></a>对于 $20\%$ 的数据：$1\leqslant n\leqslant 50000,1\leqslant k\leqslant10^9$</h3><p><del>这部分是给根号算法留的，但是由于出题人没有仔细想怎么做，所以就当送分好了。</del></p><h3 id="对于-20-的数据：-1-leqslant-n-leqslant-10-6-1-leqslant-k-leqslant-10-9"><a href="#对于-20-的数据：-1-leqslant-n-leqslant-10-6-1-leqslant-k-leqslant-10-9" class="headerlink" title="对于 $20\%$ 的数据：$1\leqslant n\leqslant 10^6,1\leqslant k\leqslant 10^9$"></a>对于 $20\%$ 的数据：$1\leqslant n\leqslant 10^6,1\leqslant k\leqslant 10^9$</h3><p>根据 $\text{p}\acute{\text{o}}\text{lya}$ 定理我们可以知道：</p><script type="math/tex; mode=display">f[n]=\frac1n\sum_{i=1}^nk^{\gcd(i,n)}</script><p>经过简单的推导可以得到：</p><script type="math/tex; mode=display">\begin{align}&\sum_{i=1}^ni\times f[i]=\sum_{i=1}^n\sum_{d=1}^ik^{\gcd(d,i)}\\=&\sum_{i=1}^n\sum_{d|i}k^d\sum_{x=1}^i[\gcd(x,i)=d]\\=&\sum_{i=1}^n\sum_{d|i}k^d\sum_{x=1}^{\frac id}[\gcd(x,\frac id)=1]\\=&\sum_{i=1}^n\sum_{d|i}k^d\varphi(\frac id)=\sum_{d=1}^nk^d\sum_{d|i}^n\varphi(\frac id)\\=&\sum_{d=1}^nk^d\sum_{i=1}^{\lfloor\frac nd\rfloor}\varphi(i)\end{align}</script><p>根据这个式子就可以线性筛 $\varphi$ 并预处理前缀和计算，时间复杂度 $O(n)$ 。</p><h3 id="对于-20-的数据：-1-leqslant-n-leqslant-10-9-1-leqslant-k-leqslant-10-9"><a href="#对于-20-的数据：-1-leqslant-n-leqslant-10-9-1-leqslant-k-leqslant-10-9" class="headerlink" title="对于 $20\%$ 的数据：$1\leqslant n\leqslant 10^9,1\leqslant k\leqslant 10^9$"></a>对于 $20\%$ 的数据：$1\leqslant n\leqslant 10^9,1\leqslant k\leqslant 10^9$</h3><script type="math/tex; mode=display">\sum_{i=1}^ni\times\frac1i\sum_{d=1}^ik^{\gcd(d,i)}=\frac 12(\sum_{i=1}^n\sum_{j=1}^nk^{\gcd(i,j)}+\sum_{i=1}^nk^i)</script><p>后面是一个等比数列求和，于是我们只要解决括号内的前半部分即可。</p><script type="math/tex; mode=display">\sum_{i=1}^n\sum_{j=1}^nk^{\gcd(i,j)}=\sum_{d=1}^nk^d\sum_{i=1}^n\sum_{j=1}^n[\gcd(i,j)=d]</script><p>后面那部分可以莫比乌斯反演，得到：</p><script type="math/tex; mode=display">\sum_{d=1}^nk^d\sum_{i=1}^{\lfloor\frac nd\rfloor}\sum_{j=1}^{\lfloor\frac nd\rfloor}\sum_{d'|i,d'|j}\mu(d')=\sum_{d=1}^nk^d\sum_{d'=1}^{\lfloor\frac nd\rfloor}\mu(d')\biggl\lfloor\frac n{dd'}\biggr\rfloor^2</script><p>设：</p><script type="math/tex; mode=display">g[n]=\sum_{d=1}^n\mu(d)\biggl\lfloor\frac n{d}\biggr\rfloor^2</script><p>那么：</p><script type="math/tex; mode=display">\sum_{d=1}^nk^dg[\Bigl\lfloor\frac nd\Big\rfloor]</script><p>如果我们用除法分块求$g$的话，会发现我们要用到的$\mu$的前缀和的位置一定可以表示成$\Big\lfloor\frac nd\Big\rfloor$的形式，这些位置的前缀和可以用杜教筛$O(n^{\frac 23})$一次性预处理出来，那么$g[n]$可以$O(\sqrt n)$计算，外面再套一个除法分块复杂度是$O(n^{\frac 34})$的，这个复杂度的证明可以看：<a href="https://czyhe.me/blog/math/yi-xie-mei-sha-yong-de-gu-ji/yi-xie-mei-sha-yong-de-gu-ji/" target="_blank" rel="noopener">这里</a></p><h3 id="对于-20-的数据：-1-leqslant-n-leqslant-10-11-1-leqslant-k-leqslant-10-9"><a href="#对于-20-的数据：-1-leqslant-n-leqslant-10-11-1-leqslant-k-leqslant-10-9" class="headerlink" title="对于 $20\%$ 的数据：$1\leqslant n\leqslant 10^{11},1\leqslant k\leqslant 10^9$"></a>对于 $20\%$ 的数据：$1\leqslant n\leqslant 10^{11},1\leqslant k\leqslant 10^9$</h3><p>考虑 $1\leqslant n\leqslant10^6$ 那部分的做法，求 $\varphi$ 的前缀和可以杜教筛，然后求和用除法分块优化即可。</p><p>时间复杂度 $O(n^{\frac 23})$ 。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Description：&quot;&gt;&lt;a href=&quot;#Description：&quot; class=&quot;headerlink&quot; title=&quot;Description：&quot;&gt;&lt;/a&gt;Description：&lt;/h1&gt;&lt;p&gt;我们设 $f[i]​$ 表示 $i​$ 个点的环，每个点染 
      
    
    </summary>
    
    
  </entry>
  
</feed>
