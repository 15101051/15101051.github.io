<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WoXinChangDan!!!</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-22T11:38:16.800Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>15101051</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>九省联考2018 IIIDX</title>
    <link href="http://yoursite.com/2018/05/22/bzoj5249-IIIDX/"/>
    <id>http://yoursite.com/2018/05/22/bzoj5249-IIIDX/</id>
    <published>2018-05-22T05:10:03.000Z</published>
    <updated>2018-05-22T11:38:16.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h2><p>给出$N$个数，求一个字典序最大的序列使得满足所有$ D_i  $  $\ge $ $D_{\frac{i}{2}} $</p><p>$ 1\le N \le 500000 $</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h2><p>把限制关系抽象成树，那么一个贪心思路是按树的后序遍历选值，但是这种做法在有多个重复值时会出错，分析一下出错原因会发现是因为当有多个值相同时可以选择相同的值中的最后一个以达到将更多大的数让出来的目的，可以设计出这样一个算法：对于当前正在处理的数 $i $，设它的子树大小为$ siz_i $ 则没有选过的第选择$ siz_i $个数，如果有多个相同的数，则选择最后一个，且为他的子树预留$ siz_i $个比它大数，用线段树二分$ + $区间加实现选择和预留的过程，注意每次选择时要先除去他父亲为他预留的标记</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 500010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">double</span> k;</span><br><span class="line"><span class="keyword">int</span> n,a[MAXN],fa[MAXN],siz[MAXN],res[MAXN];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; p;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;++i)&#123;fa[i] = (<span class="keyword">int</span>)((<span class="keyword">double</span>)i / k + eps);&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n;i &gt;= <span class="number">1</span>;--i)&#123;siz[i] += <span class="number">1</span>;siz[fa[i]] += siz[i];&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;++i)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">sort(a + <span class="number">1</span>,a + <span class="number">1</span> + n,greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;++i)p[a[i]].push_back(i);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> lc,rc,tag,minv;</span><br><span class="line">&#125;t[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> ptr = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">newnode</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> ++ptr;&#125;</span><br><span class="line"><span class="keyword">int</span> root;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;t[rt].tag = <span class="number">0</span>;t[rt].minv = l;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">int</span> mid = ((l + r) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">build(t[rt].lc = newnode(),l,mid);</span><br><span class="line">build(t[rt].rc = newnode(),mid + <span class="number">1</span>,r);</span><br><span class="line">t[rt].minv = min(t[t[rt].lc].minv,t[t[rt].rc].minv);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[rt].tag == <span class="number">0</span>)<span class="keyword">return</span>;</span><br><span class="line">t[t[rt].lc].minv += t[rt].tag;t[t[rt].lc].tag += t[rt].tag;</span><br><span class="line">t[t[rt].rc].minv += t[rt].tag;t[t[rt].rc].tag += t[rt].tag;</span><br><span class="line">t[rt].tag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> v,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)</span><br><span class="line">&#123;</span><br><span class="line">t[rt].tag += v;</span><br><span class="line">t[rt].minv += v;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">pushdown(rt);</span><br><span class="line"><span class="keyword">int</span> mid = ((l + r) &gt;&gt; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(L &lt;= mid)add(t[rt].lc,L,R,v,l,mid);</span><br><span class="line"><span class="keyword">if</span>(R &gt;= mid + <span class="number">1</span>)add(t[rt].rc,L,R,v,mid + <span class="number">1</span>,r);</span><br><span class="line">t[rt].minv = min(t[t[rt].lc].minv,t[t[rt].rc].minv);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cur = root,l = <span class="number">1</span>,r = n;</span><br><span class="line"><span class="keyword">while</span>(l != r)</span><br><span class="line">&#123;</span><br><span class="line">pushdown(cur);</span><br><span class="line"><span class="keyword">if</span>(t[t[cur].rc].minv &gt;= v)&#123;cur = t[cur].lc;r = ((l + r) &gt;&gt; <span class="number">1</span>);&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;cur = t[cur].rc;l = ((l + r) &gt;&gt; <span class="number">1</span>) + <span class="number">1</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (t[cur].minv &gt;= v ? l : l + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">init();</span><br><span class="line">build(root = newnode(),<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(fa[i])add(root,res[fa[i]],n,siz[i],<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">int</span> k = query(siz[i]);</span><br><span class="line">res[i] = p[a[k]].back();p[a[k]].pop_back();</span><br><span class="line">add(root,res[i],n,-siz[i],<span class="number">1</span>,n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;++i)<span class="built_in">printf</span>(<span class="string">"%d "</span>,a[res[i]]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description:&quot;&gt;&lt;/a&gt;Description:&lt;/h2&gt;&lt;p&gt;给出$N$个数，求一个字典序最大的序列使得满足所有$ D_i  
      
    
    </summary>
    
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>ZJOI2012 网络</title>
    <link href="http://yoursite.com/2018/05/22/bzoj2816-%E7%BD%91%E7%BB%9C/"/>
    <id>http://yoursite.com/2018/05/22/bzoj2816-网络/</id>
    <published>2018-05-22T05:10:03.000Z</published>
    <updated>2018-05-22T10:50:48.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h2><p>一个无向图$G$，每个点有个权值，每条边有一个颜色。这个无向图满足以下两个条件： </p><ol><li>对于任意节点连出去的边中，相同颜色的边不超过两条。</li><li><p>图中不存在同色的环，同色的环指相同颜色的边构成的环。</p><p>在这个图上，支持以下三种操作：</p></li><li><p>修改一个节点的权值。</p></li><li>修改一条边的颜色。</li><li>查询由颜色c的边构成的图中，所有可能在节点u到节点v之间的简单路径上的节点的权值的最大值。</li></ol><p>$ 1 \le N \le 10000 , 1 \le M \le 100000 , C \le 10 , K \le 100000$</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h2><p>没有同色的环，说明是森林，路径可以用$LCT$维护，边有多种颜色，那就开$10$棵$LCT$</p><p>修改一个边颜色时在一棵$LCT$里$cut$，在另一颗$LCT$里$link$</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXC 11</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10010</span></span><br><span class="line"><span class="keyword">int</span> n,m,c,k;</span><br><span class="line"><span class="built_in">map</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,<span class="keyword">int</span>&gt; col;</span><br><span class="line"><span class="keyword">int</span> cnt[MAXC][MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> c[<span class="number">2</span>],fa,v,maxv;</span><br><span class="line"><span class="keyword">bool</span> rev;</span><br><span class="line"><span class="keyword">int</span>&amp; <span class="keyword">operator</span> [](<span class="keyword">int</span> x)&#123;<span class="keyword">return</span> c[x];&#125;</span><br><span class="line">node()&#123;c[<span class="number">0</span>] = c[<span class="number">1</span>] = fa = v = maxv = <span class="number">0</span>;rev = <span class="literal">false</span>;&#125;</span><br><span class="line">&#125;t[MAXC][MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">t[p][k].maxv = t[p][k].v;</span><br><span class="line"><span class="keyword">if</span>(t[p][k][<span class="number">0</span>] != <span class="number">0</span>)t[p][k].maxv = max(t[p][k].maxv,t[p][t[p][k][<span class="number">0</span>]].maxv);</span><br><span class="line"><span class="keyword">if</span>(t[p][k][<span class="number">1</span>] != <span class="number">0</span>)t[p][k].maxv = max(t[p][k].maxv,t[p][t[p][k][<span class="number">1</span>]].maxv);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isroot</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> k)</span></span>&#123;<span class="keyword">return</span> (t[p][t[p][k].fa][<span class="number">0</span>] != k &amp;&amp; t[p][t[p][k].fa][<span class="number">1</span>] != k);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> k)</span></span>&#123;<span class="keyword">return</span> (t[p][t[p][k].fa][<span class="number">0</span>] == k ? <span class="number">0</span> : <span class="number">1</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> k,<span class="keyword">int</span> f,<span class="keyword">int</span> type)</span></span>&#123;t[p][k].fa = f;t[p][f][type] = k;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> y = t[p][x].fa,z = t[p][y].fa,fx = id(p,x),fy = id(p,y);</span><br><span class="line"><span class="keyword">if</span>(!isroot(p,y))t[p][z][fy] = x;</span><br><span class="line">t[p][x].fa = z;</span><br><span class="line">connect(p,t[p][x][fx^<span class="number">1</span>],y,fx);</span><br><span class="line">connect(p,y,x,fx^<span class="number">1</span>);</span><br><span class="line">maintain(p,y);maintain(p,x);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!t[p][k].rev)<span class="keyword">return</span>;</span><br><span class="line">t[p][t[p][k][<span class="number">0</span>]].rev ^= <span class="number">1</span>;t[p][t[p][k][<span class="number">1</span>]].rev ^= <span class="number">1</span>;</span><br><span class="line">swap(t[p][k][<span class="number">0</span>],t[p][k][<span class="number">1</span>]);t[p][k].rev = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">s.push(x);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = x;!isroot(p,i);i = t[p][i].fa)s.push(t[p][i].fa);</span><br><span class="line"><span class="keyword">while</span>(!s.empty())&#123;pushdown(p,s.top());s.pop();&#125;</span><br><span class="line"><span class="keyword">while</span>(!isroot(p,x))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> y = t[p][x].fa;</span><br><span class="line"><span class="keyword">if</span>(isroot(p,y))&#123;rotate(p,x);<span class="keyword">break</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(id(p,x) == id(p,y))&#123;rotate(p,y);rotate(p,x);&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;rotate(p,x);rotate(p,x);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> k)</span></span>&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;k;i = k,k = t[p][k].fa)&#123;splay(p,k);t[p][k].c[<span class="number">1</span>] = i;maintain(p,k);&#125;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeroot</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> k)</span></span>&#123;access(p,k);splay(p,k);t[p][k].rev ^= <span class="number">1</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;makeroot(p,x);access(p,y);splay(p,y);t[p][x].fa = t[p][y][<span class="number">0</span>] = <span class="number">0</span>;maintain(p,y);<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;makeroot(p,x);t[p][x].fa = y;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> k)</span></span>&#123;access(p,k);splay(p,k);<span class="keyword">while</span>(<span class="literal">true</span>)&#123;pushdown(p,k);<span class="keyword">if</span>(t[p][k][<span class="number">0</span>] != <span class="number">0</span>)k = t[p][k][<span class="number">0</span>];<span class="keyword">else</span> <span class="keyword">return</span> k;&#125;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;m,&amp;c,&amp;k);</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= c;++j)t[j][i].v = t[j][i].maxv = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> u,v,w;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w);++w;</span><br><span class="line"><span class="keyword">if</span>(u &gt; v)swap(u,v);</span><br><span class="line">link(w,u,v);col[make_pair(u,v)] = w;</span><br><span class="line">++cnt[w][u];++cnt[w][v];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> opt;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= k;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;opt);</span><br><span class="line"><span class="keyword">if</span>(opt == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> p = <span class="number">1</span>;p &lt;= c;++p)&#123;makeroot(p,u);t[p][u].v = v;maintain(p,u);&#125;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w);++w;</span><br><span class="line"><span class="keyword">if</span>(u &gt; v)swap(u,v);</span><br><span class="line"><span class="keyword">if</span>(!col.count(make_pair(u,v)))&#123;<span class="built_in">puts</span>(<span class="string">"No such edge."</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(col[make_pair(u,v)] == w)&#123;<span class="built_in">puts</span>(<span class="string">"Success."</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt[w][u] == <span class="number">2</span> || cnt[w][v] == <span class="number">2</span>)&#123;<span class="built_in">puts</span>(<span class="string">"Error 1."</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(find(w,u) == find(w,v))&#123;<span class="built_in">puts</span>(<span class="string">"Error 2."</span>);<span class="keyword">continue</span>;&#125; </span><br><span class="line"><span class="keyword">int</span> h = col[make_pair(u,v)];</span><br><span class="line">cut(h,u,v);link(w,u,v);col[make_pair(u,v)] = w;</span><br><span class="line">--cnt[h][u];--cnt[h][v];</span><br><span class="line">++cnt[w][u];++cnt[w][v];</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Success."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;w,&amp;u,&amp;v);++w;</span><br><span class="line"><span class="keyword">if</span>(find(w,u) != find(w,v))&#123;<span class="built_in">puts</span>(<span class="string">"-1"</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;makeroot(w,u);access(w,v);splay(w,v);<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,t[w][v].maxv);&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description:&quot;&gt;&lt;/a&gt;Description:&lt;/h2&gt;&lt;p&gt;一个无向图$G$，每个点有个权值，每条边有一个颜色。这个无向图满
      
    
    </summary>
    
    
      <category term="LCT" scheme="http://yoursite.com/tags/LCT/"/>
    
  </entry>
  
</feed>
